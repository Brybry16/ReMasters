// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/Move.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ReMastersLib {

  /// <summary>Holder for reflection information generated from Proto/Move.proto</summary>
  public static partial class MoveReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/Move.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MoveReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBQcm90by9Nb3ZlLnByb3RvEgxSZU1hc3RlcnNMaWIi1gEKBE1vdmUSDgoG",
            "TW92ZUlEGAEgASgNEiIKAnUyGAIgASgOMhYuUmVNYXN0ZXJzTGliLkNhdGVn",
            "b3J5EgoKAnUzGAMgASgNEgoKAnU0GAQgASgNEgoKAnU1GAUgASgNEiEKBFR5",
            "cGUYBiABKA4yEy5SZU1hc3RlcnNMaWIuVHlwZXMSCgoCdTcYByABKA0SCgoC",
            "dTgYCCABKA0SDQoFRHJhaW4YCSABKA0SDQoFUG93ZXIYCiABKA0SEAoIQWNj",
            "dXJhY3kYCyABKA0SCwoDdTEyGAwgASgNIjAKCU1vdmVUYWJsZRIjCgdlbnRy",
            "aWVzGAEgAygLMhIuUmVNYXN0ZXJzTGliLk1vdmUqQQoIQ2F0ZWdvcnkSDgoK",
            "Tm9DYXRlZ29yeRAAEgwKCFBoeXNpY2FsEAESCwoHU3BlY2lhbBACEgoKBlN0",
            "YXR1cxADKt8BCgVUeXBlcxIKCgZOb1R5cGUQABIKCgZOb3JtYWwQARIICgRG",
            "aXJlEAISCQoFV2F0ZXIQAxIMCghFbGVjdHJpYxAEEgkKBUdyYXNzEAUSBwoD",
            "SWNlEAYSDAoIRmlnaHRpbmcQBxIKCgZQb2lzb24QCBIKCgZHcm91bmQQCRIK",
            "CgZGbHlpbmcQChILCgdQc3ljaGljEAsSBwoDQnVnEAwSCAoEUm9jaxANEgkK",
            "BUdob3N0EA4SCgoGRHJhZ29uEA8SCAoERGFyaxAQEgkKBVN0ZWVsEBESCQoF",
            "RmFpcnkQEmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ReMastersLib.Category), typeof(global::ReMastersLib.Types), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.Move), global::ReMastersLib.Move.Parser, new[]{ "MoveID", "U2", "U3", "U4", "U5", "Type", "U7", "U8", "Drain", "Power", "Accuracy", "U12" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ReMastersLib.MoveTable), global::ReMastersLib.MoveTable.Parser, new[]{ "Entries" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Category {
    [pbr::OriginalName("NoCategory")] NoCategory = 0,
    [pbr::OriginalName("Physical")] Physical = 1,
    [pbr::OriginalName("Special")] Special = 2,
    [pbr::OriginalName("Status")] Status = 3,
  }

  public enum Types {
    [pbr::OriginalName("NoType")] NoType = 0,
    [pbr::OriginalName("Normal")] Normal = 1,
    [pbr::OriginalName("Fire")] Fire = 2,
    [pbr::OriginalName("Water")] Water = 3,
    [pbr::OriginalName("Electric")] Electric = 4,
    [pbr::OriginalName("Grass")] Grass = 5,
    [pbr::OriginalName("Ice")] Ice = 6,
    [pbr::OriginalName("Fighting")] Fighting = 7,
    [pbr::OriginalName("Poison")] Poison = 8,
    [pbr::OriginalName("Ground")] Ground = 9,
    [pbr::OriginalName("Flying")] Flying = 10,
    [pbr::OriginalName("Psychic")] Psychic = 11,
    [pbr::OriginalName("Bug")] Bug = 12,
    [pbr::OriginalName("Rock")] Rock = 13,
    [pbr::OriginalName("Ghost")] Ghost = 14,
    [pbr::OriginalName("Dragon")] Dragon = 15,
    [pbr::OriginalName("Dark")] Dark = 16,
    [pbr::OriginalName("Steel")] Steel = 17,
    [pbr::OriginalName("Fairy")] Fairy = 18,
  }

  #endregion

  #region Messages
  public sealed partial class Move : pb::IMessage<Move> {
    private static readonly pb::MessageParser<Move> _parser = new pb::MessageParser<Move>(() => new Move());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Move> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.MoveReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move(Move other) : this() {
      moveID_ = other.moveID_;
      u2_ = other.u2_;
      u3_ = other.u3_;
      u4_ = other.u4_;
      u5_ = other.u5_;
      type_ = other.type_;
      u7_ = other.u7_;
      u8_ = other.u8_;
      drain_ = other.drain_;
      power_ = other.power_;
      accuracy_ = other.accuracy_;
      u12_ = other.u12_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Move Clone() {
      return new Move(this);
    }

    /// <summary>Field number for the "MoveID" field.</summary>
    public const int MoveIDFieldNumber = 1;
    private uint moveID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoveID {
      get { return moveID_; }
      set {
        moveID_ = value;
      }
    }

    /// <summary>Field number for the "u2" field.</summary>
    public const int U2FieldNumber = 2;
    private global::ReMastersLib.Category u2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ReMastersLib.Category U2 {
      get { return u2_; }
      set {
        u2_ = value;
      }
    }

    /// <summary>Field number for the "u3" field.</summary>
    public const int U3FieldNumber = 3;
    private uint u3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint U3 {
      get { return u3_; }
      set {
        u3_ = value;
      }
    }

    /// <summary>Field number for the "u4" field.</summary>
    public const int U4FieldNumber = 4;
    private uint u4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint U4 {
      get { return u4_; }
      set {
        u4_ = value;
      }
    }

    /// <summary>Field number for the "u5" field.</summary>
    public const int U5FieldNumber = 5;
    private uint u5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint U5 {
      get { return u5_; }
      set {
        u5_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 6;
    private global::ReMastersLib.Types type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ReMastersLib.Types Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "u7" field.</summary>
    public const int U7FieldNumber = 7;
    private uint u7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint U7 {
      get { return u7_; }
      set {
        u7_ = value;
      }
    }

    /// <summary>Field number for the "u8" field.</summary>
    public const int U8FieldNumber = 8;
    private uint u8_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint U8 {
      get { return u8_; }
      set {
        u8_ = value;
      }
    }

    /// <summary>Field number for the "Drain" field.</summary>
    public const int DrainFieldNumber = 9;
    private uint drain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Drain {
      get { return drain_; }
      set {
        drain_ = value;
      }
    }

    /// <summary>Field number for the "Power" field.</summary>
    public const int PowerFieldNumber = 10;
    private uint power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "Accuracy" field.</summary>
    public const int AccuracyFieldNumber = 11;
    private uint accuracy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Accuracy {
      get { return accuracy_; }
      set {
        accuracy_ = value;
      }
    }

    /// <summary>Field number for the "u12" field.</summary>
    public const int U12FieldNumber = 12;
    private uint u12_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint U12 {
      get { return u12_; }
      set {
        u12_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Move);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Move other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MoveID != other.MoveID) return false;
      if (U2 != other.U2) return false;
      if (U3 != other.U3) return false;
      if (U4 != other.U4) return false;
      if (U5 != other.U5) return false;
      if (Type != other.Type) return false;
      if (U7 != other.U7) return false;
      if (U8 != other.U8) return false;
      if (Drain != other.Drain) return false;
      if (Power != other.Power) return false;
      if (Accuracy != other.Accuracy) return false;
      if (U12 != other.U12) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MoveID != 0) hash ^= MoveID.GetHashCode();
      if (U2 != 0) hash ^= U2.GetHashCode();
      if (U3 != 0) hash ^= U3.GetHashCode();
      if (U4 != 0) hash ^= U4.GetHashCode();
      if (U5 != 0) hash ^= U5.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (U7 != 0) hash ^= U7.GetHashCode();
      if (U8 != 0) hash ^= U8.GetHashCode();
      if (Drain != 0) hash ^= Drain.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Accuracy != 0) hash ^= Accuracy.GetHashCode();
      if (U12 != 0) hash ^= U12.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MoveID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MoveID);
      }
      if (U2 != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) U2);
      }
      if (U3 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(U3);
      }
      if (U4 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(U4);
      }
      if (U5 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(U5);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Type);
      }
      if (U7 != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(U7);
      }
      if (U8 != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(U8);
      }
      if (Drain != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Drain);
      }
      if (Power != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Power);
      }
      if (Accuracy != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Accuracy);
      }
      if (U12 != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(U12);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MoveID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MoveID);
      }
      if (U2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) U2);
      }
      if (U3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(U3);
      }
      if (U4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(U4);
      }
      if (U5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(U5);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (U7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(U7);
      }
      if (U8 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(U8);
      }
      if (Drain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Drain);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Power);
      }
      if (Accuracy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Accuracy);
      }
      if (U12 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(U12);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Move other) {
      if (other == null) {
        return;
      }
      if (other.MoveID != 0) {
        MoveID = other.MoveID;
      }
      if (other.U2 != 0) {
        U2 = other.U2;
      }
      if (other.U3 != 0) {
        U3 = other.U3;
      }
      if (other.U4 != 0) {
        U4 = other.U4;
      }
      if (other.U5 != 0) {
        U5 = other.U5;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.U7 != 0) {
        U7 = other.U7;
      }
      if (other.U8 != 0) {
        U8 = other.U8;
      }
      if (other.Drain != 0) {
        Drain = other.Drain;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Accuracy != 0) {
        Accuracy = other.Accuracy;
      }
      if (other.U12 != 0) {
        U12 = other.U12;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MoveID = input.ReadUInt32();
            break;
          }
          case 16: {
            U2 = (global::ReMastersLib.Category) input.ReadEnum();
            break;
          }
          case 24: {
            U3 = input.ReadUInt32();
            break;
          }
          case 32: {
            U4 = input.ReadUInt32();
            break;
          }
          case 40: {
            U5 = input.ReadUInt32();
            break;
          }
          case 48: {
            Type = (global::ReMastersLib.Types) input.ReadEnum();
            break;
          }
          case 56: {
            U7 = input.ReadUInt32();
            break;
          }
          case 64: {
            U8 = input.ReadUInt32();
            break;
          }
          case 72: {
            Drain = input.ReadUInt32();
            break;
          }
          case 80: {
            Power = input.ReadUInt32();
            break;
          }
          case 88: {
            Accuracy = input.ReadUInt32();
            break;
          }
          case 96: {
            U12 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveTable : pb::IMessage<MoveTable> {
    private static readonly pb::MessageParser<MoveTable> _parser = new pb::MessageParser<MoveTable>(() => new MoveTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ReMastersLib.MoveReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveTable(MoveTable other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveTable Clone() {
      return new MoveTable(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ReMastersLib.Move> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::ReMastersLib.Move.Parser);
    private readonly pbc::RepeatedField<global::ReMastersLib.Move> entries_ = new pbc::RepeatedField<global::ReMastersLib.Move>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ReMastersLib.Move> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveTable other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
